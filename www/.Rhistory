library(frailtypack)
library(rhandsontable)
data("readmission", package = "frailtypack")
ui <- fluidPage(
titlePanel("prediction"),
mainPanel(
fluidRow(rHandsontableOutput("hot")),
br(),
plotOutput("pred")
)
)
server <- function(input, output) {
newdata <- subset(readmission,select = c("time","event","id","dukes"))
datapred <- newdata[1,]
data <- reactive({
hot <- input$hot
if (!is.null(hot)) hot_to_r(hot)
})
model <- frailtyPenal(Surv(time,event)~cluster(id)+dukes,n.knots=10,
kappa=10000,data=readmission)
predict <- reactive({
dat <- data()
if (!is.null(dat)) {
prediction(model, dat,t=200,window=seq(50,1900,50),
MC.sample=100)
}
})
output$hot <- renderRHandsontable({
rhandsontable(datapred)
})
output$pred <- renderPlot({
pred <- predict()
if (!is.null(pred)) plot(pred, conf.bands = TRUE)
})
}
shinyApp(ui = ui, server = server)
follow
install.packages("frailtyPenal")
library(shiny)
library(frailtypack)
library(rhandsontable)
data("readmission", package = "frailtypack")
ui <- fluidPage(
titlePanel("prediction"),
mainPanel(
fluidRow(rHandsontableOutput("hot")),
br(),
plotOutput("pred")
)
)
server <- function(input, output) {
newdata <- subset(readmission,select = c("time","event","id","dukes"))
datapred <- newdata[1,]
data <- reactive({
hot <- input$hot
if (!is.null(hot)) hot_to_r(hot)
})
model <- frailtyPenal(Surv(time,event)~cluster(id)+dukes,n.knots=10,
kappa=10000,data=readmission)
predict <- reactive({
dat <- data()
if (!is.null(dat)) {
prediction(model, dat,t=200,window=seq(50,1900,50),
MC.sample=100)
}
})
output$hot <- renderRHandsontable({
rhandsontable(datapred)
})
output$pred <- renderPlot({
pred <- predict()
if (!is.null(pred)) plot(pred, conf.bands = TRUE)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(frailtypack)
library(rhandsontable)
data("readmission", package = "frailtypack")
ui <- fluidPage(
titlePanel("prediction"),
mainPanel(
fluidRow(rHandsontableOutput("hot")),
br(),
plotOutput("pred")
)
)
server <- function(input, output) {
newdata <- subset(readmission,select = c("time","event","id","dukes"))
datapred <- newdata[1,]
data <- reactive({
hot <- input$hot
if (!is.null(hot)) hot_to_r(hot)
})
model <- frailtyPenal(Surv(time,event)~cluster(id)+dukes,n.knots=10,
kappa=10000,data=readmission)
predict <- reactive({
dat <- data()
if (!is.null(dat)) {
prediction(model, dat,t=200,window=seq(50,1900,50),
MC.sample=100)
}
})
output$hot <- renderRHandsontable({
rhandsontable(datapred)
})
output$pred <- renderPlot({
pred <- predict()
if (!is.null(pred)) plot(pred, conf.bands = TRUE)
})
}
shinyApp(ui = ui, server = server)
install.packages("frailtyPenal")
( DF <- data.frame(Value = 1:10, Status = TRUE, Name = LETTERS[1:10],
Date = seq(from = Sys.Date(), by = "days", length.out = 10),
stringsAsFactors = FALSE) )
library(rhandsontable)
library(shiny)
editTable <- function(DF, outdir=getwd(), outfilename="table"){
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
wellPanel(
h3("Table options"),
radioButtons("useType", "Use Data Types", c("TRUE", "FALSE"))
),
br(),
wellPanel(
h3("Save table"),
div(class='row',
div(class="col-sm-6",
actionButton("save", "Save")),
div(class="col-sm-6",
radioButtons("fileType", "File type", c("ASCII", "RDS")))
)
)
),
mainPanel(
wellPanel(
uiOutput("message", inline=TRUE)
),
actionButton("cancel", "Cancel last action"),
br(), br(),
rHandsontableOutput("hot"),
br(),
wellPanel(
h3("Add a column"),
div(class='row',
div(class="col-sm-5",
uiOutput("ui_newcolname"),
actionButton("addcolumn", "Add")),
div(class="col-sm-4",
radioButtons("newcolumntype", "Type", c("integer", "double", "character"))),
div(class="col-sm-3")
)
)
)
)
))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
values[["previous"]] <- isolate(values[["DF"]])
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
## Save
observeEvent(input$save, {
fileType <- isolate(input$fileType)
finalDF <- isolate(values[["DF"]])
if(fileType == "ASCII"){
dput(finalDF, file=file.path(outdir, sprintf("%s.txt", outfilename)))
}
else{
saveRDS(finalDF, file=file.path(outdir, sprintf("%s.rds", outfilename)))
}
}
)
## Cancel last action
observeEvent(input$cancel, {
if(!is.null(isolate(values[["previous"]]))) values[["DF"]] <- isolate(values[["previous"]])
})
## Add column
output$ui_newcolname <- renderUI({
textInput("newcolumnname", "Name", sprintf("newcol%s", 1+ncol(values[["DF"]])))
})
observeEvent(input$addcolumn, {
DF <- isolate(values[["DF"]])
values[["previous"]] <- DF
newcolumn <- eval(parse(text=sprintf('%s(nrow(DF))', isolate(input$newcolumntype))))
values[["DF"]] <- setNames(cbind(DF, newcolumn, stringsAsFactors=FALSE), c(names(DF), isolate(input$newcolumnname)))
})
## Message
output$message <- renderUI({
if(input$save==0){
helpText(sprintf("This table will be saved in folder \"%s\" once you press the Save button.", outdir))
}else{
outfile <- ifelse(isolate(input$fileType)=="ASCII", "table.txt", "table.rds")
fun <- ifelse(isolate(input$fileType)=="ASCII", "dget", "readRDS")
list(helpText(sprintf("File saved: \"%s\".", file.path(outdir, outfile))),
helpText(sprintf("Type %s(\"%s\") to get it.", fun, outfile)))
}
})
})
## run app
runApp(list(ui=ui, server=server))
return(invisible())
}
editTable(DF, outdir="~/Documents/", outfilename="newDF")
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
?navbarPage
?navbarPage
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
#Load ing required Libraries
########################################## Create a list of packages to install
packagelist_x<-c("shiny",'shinyWidgets',"ggplot2","plotly","ggforce", "dplyr","purrr", "tidyr", "mgcv", "DT", "stringr","scales", "shinyjs","readxl","readr", "openxlsx","plotly", "shinyalert", "reshape2", "pracma", 'janitor', "profvis", "shinyLP", "shinyBS",  "DT","rhandsontable", "jsonlite")
###########################################Install using apply after checking if available in working directory
options(DT.options = list(pageLength = 5, language = list(search = 'Filter:')))
options(digits = 3  )
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
#########SCIENTIFIC NOTATION FUNCTION DEFINED HERE
changeSciNot<-function(n) {
if(n>=10|n<1){
output <- format(n, scientific = TRUE)
output <- sub("e", "*10^", output)
output <- sub("\\+0?", "", output)
output <- sub("-0?", "-", output)
return(output)
}}
#############################################
ipak(packagelist_x)
###########################################Load all the needed packages in R
#lapply(packagelist_x, require, character.only = FALSE)
###################BLOCK ALL WARNINGS GLOBALLY
options(warn=-1)
##############################################################
######################### We now create the login portions here
options(shiny.sanitize.errors = FALSE)
Logged =TRUE;############ if u create false, u will need to use login ID and password
###########USER ID  AND PASSWORD ARE SET ON SERVER
my_username <- c("Marco", "Philippe")
my_password <- c("376d5693345ceabf6cc8a5893ad0564f", "60dcc3f65f768d989752d078bf0c1673")
######################### Source code from the folder
source("ui1.r")
source("ui2.r")
source("ui1_wrong.R")
###########################################
ui = (htmlOutput("page"))
###########################################
server = (function(input, output, session) {
options(shiny.maxRequestSize=3000*1024^2)######### WE INCREASE DATA SET SIZE
withMathJax()
#######################################################LOG IN CHECK
USER <- reactiveValues(Logged = Logged)
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(my_username %in% Username)
Id.password <- which(my_password %in% Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username %in% Id.password) {
USER$Logged <- TRUE
}
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
### LOG in not null but FALSE
if (!is.null(input$Login)) {
if (input$Login > 0) {
output$page <- renderUI({
div(class="outer",do.call(bootstrapPage,c("",ui1_wrong())))
})
}
} else {
output$page <- renderUI({
div(class="outer",do.call(bootstrapPage,c("",ui1())))
})
}
}
### OK WENT WELL!
if (USER$Logged == TRUE)
{
output$page <- renderUI({
# div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Valeo Plotted",ui2())))
div(class="outer",do.call(fluidPage,c("",ui2())))
})
print(ui)
}
})
})
shinyApp(ui = ui, server = server)
runApp('C:/Work from home/26-03-2020/Weibull_Sharing_App.R')
library(shiny); runApp('C:/Work from home/26-03-2020_common/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020_common/Weibull_Sharing_App.R')
runApp('C:/Work from home/26-03-2020_common/Weibull_Sharing_App.R')
getwd()
setwd("C:/Work from home/26-03-2020_common/www")
#Load ing required Libraries
########################################## Create a list of packages to install
packagelist_x<-c("shiny",'shinyWidgets',"ggplot2","plotly","ggforce", "dplyr","purrr", "tidyr", "mgcv", "DT", "stringr","scales", "shinyjs","readxl","readr", "openxlsx","plotly", "shinyalert", "reshape2", "pracma", 'janitor', "profvis", "shinyLP", "shinyBS",  "DT","rhandsontable", "jsonlite")
###########################################Install using apply after checking if available in working directory
options(DT.options = list(pageLength = 5, language = list(search = 'Filter:')))
options(digits = 3  )
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
#########SCIENTIFIC NOTATION FUNCTION DEFINED HERE
changeSciNot<-function(n) {
if(n>=10|n<1){
output <- format(n, scientific = TRUE)
output <- sub("e", "*10^", output)
output <- sub("\\+0?", "", output)
output <- sub("-0?", "-", output)
return(output)
}}
#############################################
ipak(packagelist_x)
###########################################Load all the needed packages in R
#lapply(packagelist_x, require, character.only = FALSE)
###################BLOCK ALL WARNINGS GLOBALLY
options(warn=-1)
##############################################################
######################### We now create the login portions here
options(shiny.sanitize.errors = FALSE)
Logged =TRUE;############ if u create false, u will need to use login ID and password
###########USER ID  AND PASSWORD ARE SET ON SERVER
my_username <- c("Marco", "Philippe")
my_password <- c("376d5693345ceabf6cc8a5893ad0564f", "60dcc3f65f768d989752d078bf0c1673")
######################### Source code from the folder
source("ui1.r")
source("ui2.r")
source("ui1_wrong.R")
###########################################
ui = (htmlOutput("page"))
###########################################
server = (function(input, output, session) {
options(shiny.maxRequestSize=3000*1024^2)######### WE INCREASE DATA SET SIZE
withMathJax()
#######################################################LOG IN CHECK
USER <- reactiveValues(Logged = Logged)
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(my_username %in% Username)
Id.password <- which(my_password %in% Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username %in% Id.password) {
USER$Logged <- TRUE
}
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
### LOG in not null but FALSE
if (!is.null(input$Login)) {
if (input$Login > 0) {
output$page <- renderUI({
div(class="outer",do.call(bootstrapPage,c("",ui1_wrong())))
})
}
} else {
output$page <- renderUI({
div(class="outer",do.call(bootstrapPage,c("",ui1())))
})
}
}
### OK WENT WELL!
if (USER$Logged == TRUE)
{
output$page <- renderUI({
# div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Valeo Plotted",ui2())))
div(class="outer",do.call(fluidPage,c("",ui2())))
})
print(ui)
}
})
})
shinyApp(ui = ui, server = server)
runApp('C:/Work from home/26-03-2020_common/Weibull_Sharing_App.R')
